generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types"
  fileName     = "db.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(dbgenerated("(uuid())"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index(userId)
}

model Session {
  id           String   @id @default(dbgenerated("(uuid())"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index(userId)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(dbgenerated("(uuid())"))
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  userType      UserType   @default(chef)
  profileText   String?    @db.Text
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  deletedAt     DateTime?
  recipes       Recipe[]
  accounts      Account[]
  sessions      Session[]
  UserLink      UserLink[]
}

enum UserType {
  general
  chef
}

enum LinkCategory {
  twitter
  facebook
  instagram
  tiktok
  youtube
  hp
  other
}

model UserLink {
  id        String       @id @default(dbgenerated("(uuid())"))
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  category  LinkCategory @default(other)
  url       String       @db.VarChar(255)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  deletedAt DateTime?

  @@index(userId)
}

model Recipe {
  id                     String                   @id @default(dbgenerated("(uuid())"))
  user                   User                     @relation(fields: [userId], references: [id])
  userId                 String
  name                   String                   @db.VarChar(255)
  description            String                   @db.Text
  servings               Int
  isPublic               Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  deletedAt              DateTime?
  recipeIngredients      RecipeIngredient[]
  recipeCookingProcedure RecipeCookingProcedure[]
  RecipeImage            RecipeImage[]
  RecipeLink             RecipeLink[]

  @@index(userId)
}

model RecipeIngredient {
  id        String    @id @default(dbgenerated("(uuid())"))
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  recipeId  String
  name      String    @db.VarChar(255)
  remarks   String?   @db.Text
  sort      Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  deletedAt DateTime?

  @@index(recipeId)
}

model RecipeCookingProcedure {
  id        String    @id @default(dbgenerated("(uuid())"))
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  recipeId  String
  name      String    @db.VarChar(255)
  remarks   String?   @db.Text
  sort      Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  deletedAt DateTime?

  @@index(recipeId)
}

model RecipeImage {
  id        String    @id @default(dbgenerated("(uuid())"))
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  recipeId  String
  imgSrc    String    @db.Text
  sort      Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  deletedAt DateTime?

  @@index(recipeId)
}

model RecipeLink {
  id        String       @id @default(dbgenerated("(uuid())"))
  recipe    Recipe       @relation(fields: [recipeId], references: [id])
  recipeId  String
  url       String       @db.VarChar(255)
  category  LinkCategory @default(other)
  sort      Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(dbgenerated("CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)"))
  deletedAt DateTime?

  @@index(recipeId)
}

model List {
  id         String       @id @default(dbgenerated("(uuid())"))
  name       String       @db.VarChar(255)
  createdAt  DateTime     @default(now())
  index      Int
  recipeId   String?
  Ingredient Ingredient[]
}

model Ingredient {
  id        String  @id @default(dbgenerated("(uuid())"))
  name      String  @db.VarChar(255)
  isChecked Boolean @default(false)
  index     Int
  list      List    @relation(fields: [listId], references: [id])
  listId    String

  @@index(listId)
}
